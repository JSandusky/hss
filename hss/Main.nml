/*
 *  Hss Format
 *  Copyright (c)2008 Motion-Twin
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License or the LICENSE file for more details.
 */
open Hss.Ast;
open Hss.Rules;

exception Error : (string, pos) list;

type context {
	mutable vars : (string,value) Map.t;
	mutable blocks : (string,expr list) Map.t;
}

function error(msg,p) {
	throw Error([(msg,p)])
}

function warning(msg,p) {
	IO.printf IO.stderr "%s:%d: %s\n" (Lexer.source p,Lexer.line p,msg);
}

function print_sep(str,f,ch,l) {
	var first = &true;
	List.iter (function(e) {
		if *first then first := false else IO.write ch str;
		f ch e;
	}) l;
}

function rec print_value(ch,v) {
	match fst v {
	| VIdent i -> IO.write ch i
	| VString s -> IO.printf ch "\"%s\"" (String.unescape s)
	| VUnit (v,u) -> IO.printf ch "%f%s" (v,u);
	| VFloat f -> IO.printf ch "%f" f;
	| VInt i -> IO.printf ch "%d" i;
	| VHex s -> IO.printf ch "#%s" s;
	| VBind (n,v) ->
		IO.printf ch "%s=" n;
		print_value ch v
	| VList l ->
		print_sep ", " print_value ch l
	| VGroup l ->
		print_sep " " print_value ch l
	| VUrl url ->
		IO.printf ch "url(\"%s\")" (String.unescape url)
	| VVar s ->
		IO.printf ch "$%s" s
	| VCall ((VIdent "CSS",_),[(VString str,_)]) ->
		IO.printf ch "%s" str
	| VCall (v,vl) ->
		print_value ch v;
		IO.write ch "(";
		print_sep "," print_value ch vl;
		IO.write ch ")";
	| VLabel (l,v) ->
		print_value ch v;
		IO.printf ch " !%s" l;
	| VOp _ ->
		assert()
	}
}

function rec print_class(ch,c) {
	match c.node {
	| None -> ()
	| Some id -> IO.write ch id;
	}
	match c.attribute {
	| None -> ()
	| Some (att,val) -> IO.printf ch "[%s=\"%s\"]" (att,val)
	}
	match c.id {
	| None -> ()
	| Some id -> IO.printf ch "#%s" id;
	}
	List.iter (IO.printf ch ".%s") c.classes;
	match c.selector {
	| None -> ()
	| Some id -> IO.printf ch ":%s" id;
	}
	match c.sub {
	| None -> ()
	| Some cs ->
		IO.write ch (match c.operator { OpDefault -> " " | OpChild -> ">" });
		print_class ch cs
	}
}

function rec print_css(ch,tabs,e) {
	match fst e {
	| EVar(name,val) ->
		IO.printf ch "%svar %s = " (tabs,name);
		print_value ch val;
		IO.write ch ";\n";
	| EVarBlock (name,el) ->
		IO.printf ch "%svar %s = {\n" (tabs,name);
		List.iter (print_css ch (tabs+"\t")) el;
		IO.printf ch "%s}\n" tabs;
	| EAttribute(name,val) ->
		IO.printf ch "%s%s : " (tabs,name);
		print_value ch val;
		IO.write ch ";\n";
	| EBlock(classes,el) ->
		IO.write ch tabs;
		print_sep ", " print_class ch classes;
		IO.write ch " {\n";
		List.iter (print_css ch (tabs+"\t")) el;
		IO.printf ch "%s}\n" tabs;
	| EUseBlock name ->
		IO.printf ch "%s$%s;\n" (tabs,name);
	| ESub el ->
		List.iter (print_css ch tabs) el
	}
}

function rec make_sub(p,c) {
	{
		node = p.node;
		id = p.id;
		classes = p.classes;
		selector = p.selector;
		attribute = p.attribute;
		operator = p.operator;
		sub = match p.sub {
			| None -> Some c
			| Some p -> Some (make_sub p c)
		};
	}
}

function rec flatten_subs(acc,e) {
	match fst e {
	| EAttribute _ -> e :: acc
	| ESub el -> List.fold flatten_subs acc el
	| _ -> acc
	}
}

function rec flatten(parents,e) {
	match fst e {
	| EVar _ | EAttribute _ | EUseBlock _ | EVarBlock _ -> []
	| ESub el ->
		List.concat (List.map (flatten parents) el)
	| EBlock (classes,el) ->
		var classes = match parents {
			| [] -> classes
			| l -> List.concat (List.map (function(p) List.map (make_sub p) classes) parents)
		}
		var attribs = List.rev (List.fold flatten_subs [] el);
		var el = List.concat (List.map (flatten classes) el);
		match attribs {
		| [] -> el
		| _ -> (EBlock classes attribs,snd e) :: el
		}
	}
}

function rec check_rule(r,v) {
	match (r, fst v) {
	| (RId s, VIdent n) -> s == n
	| (RHex n, VHex s) -> String.length s == n
	| (RUnit s, VUnit(_,n)) -> s == n
	| (RCall(r,rl), VCall (v,vl)) when List.length rl == List.length vl ->
		try  {
			List.iter2 (function(r,v) if !(check_rule r v) then throw Exit) rl vl;
			check_rule r v
		} catch  {
			Exit -> false
		}
	| (RFloat, VInt _) | (RFloat, VFloat _) -> true
	| (RInt, VInt _) -> true
	| (RFloatRange(min,max), VInt n) -> n * 1.0 >= min && n * 1.0 <= max
	| (RFloatRange(min,max), VFloat n) -> n >= min && n <= max
	| (RIntRange(min,max), VInt n) -> n >= min && n <= max
	| (ROr rl,_) ->
		List.exists (function(r) check_rule r v) rl
	| (RIdent, VIdent _) -> true
	| (RString, VString _) -> true
	| (RList r, VList vl) -> List.all (check_rule r) vl
	| (RList r, _) -> check_rule r v
	| (RGroup rl, VGroup vl) when List.length rl == List.length vl ->
		try {
			List.iter2 (function(r,v) if !(check_rule r v) then throw Exit) rl vl;
			true
		} catch {
			Exit -> false
		}
	| (RGroupOpt rl, VGroup vl) ->
		function rec loop(rl,vl) {
			match (rl,vl) {
			| (r :: rl, v :: vl) ->
				if check_rule r v then
					loop rl vl
				else
					loop rl (v :: vl)
			| (_,[]) ->
				true
			| _ ->
				false
			}
		}
		loop rl vl
	| (RGroupOpt rl, _) ->
		List.exists (function(r) check_rule r v) rl
	| (RBind (s,r), VBind (n,v)) when s == n ->
		check_rule r v
	| (_,VLabel (_,v)) -> check_rule r v
	| _ -> false
	}
}

var hrules = {
	var h = Hashtbl.create();
	List.iter (function((a,b)) Hashtbl.add h a b) Hss.Rules.rules;
	h
}

function rec eval(ctx,v) {
	match fst v {
	| VIdent _
	| VString _
	| VUnit _
	| VUrl _
	| VInt _
	| VFloat _
	| VHex _ -> v
	| VList vl ->
		(VList (List.map (eval ctx) vl),snd v)
	| VGroup vl ->
		(VGroup (List.map (eval ctx) vl),snd v)
	| VVar name ->
		eval ctx (try Map.find ctx.vars name catch { Not_found -> error ("Variable not declared '" + name + "'") snd(v) })
	| VCall(v1,vl) ->
		(VCall (eval ctx v1) (List.map (eval ctx) vl),snd v)
	| VLabel (l,v1) ->
		(VLabel l (eval ctx v1), snd v)
	| VBind(name,v1) ->
		(VBind name (eval ctx v1), snd v)
	| VOp (op,v1,v2) ->
		var v1 = eval ctx v1;
		var v2 = eval ctx v2;
		var fop = function(x:float,y:float) {
			match op {
			| Add -> x + y
			| Sub -> x - y
			| Mul -> x * y
			| Div -> if y == 0. then error "Division by 0" snd(v) else x / y
			}
		};
		var res = match (fst v1,fst v2) {
		| (VInt x, VInt y) -> VFloat (fop (x * 1.0) (y * 1.0))
		| (VInt x, VFloat y) -> VFloat (fop (x * 1.0) y)
		| (VFloat x, VInt y) -> VFloat (fop x (y * 1.0))
		| (VFloat x, VFloat y) -> VFloat (x + y)
		| (VUnit (x,u), VUnit (y,u2)) when u == u2 -> VUnit (fop x y) u
		| (VUnit (x,u), VInt y) -> VUnit (fop x (y * 1.0)) u
		| (VUnit (x,u), VFloat y) -> VUnit (fop x y) u
		| (VInt x, VUnit (y,u)) -> VUnit (fop (x * 1.0) y) u
		| (VFloat x, VUnit (y,u)) -> VUnit (fop x y) u
		| (VHex c, VFloat a) ->
			// assume color operation
			var rgb = match String.length c {
				| 3 ->
					var rgb = int ("0x" + c);
					var rgb = ((rgb and 0xF) or ((rgb and 0xF0) << 4) or ((rgb and 0xF00) << 8));
					rgb or (rgb << 4)
				| 6 -> int ("0x" + c)
				| _ -> error "Operation not allowed" snd(v)
			}
			function color(c:int) {
				var c = Math.round (fop (c * 1.0) a);
				if c < 0 then 0 else if c > 255 then 255 else c;
			}
			var r = color (rgb and 0xFF);
			var g = color ((rgb >> 8) and 0xFF);
			var b = color (rgb >> 16);
			VHex (sprintf "%.6X" (r or (g << 8) or (b << 16)))
		| _ -> error "Operation not allowed" snd(v)
		}
		(res,snd v)
	}
}

function eval_block(ctx,b) {
	function add(r,v2) {
		r := fst (eval ctx (VOp Add (*r,snd v2) v2,snd v2))
	}
	function get_block_sizes(el) {
		var matched = Hashtbl.create();
		function set(k) {
			if Hashtbl.exists matched k then false else {
				Hashtbl.add matched k ();
				true;
			}
		}
		var lr = &(VInt 0);
		var tb = &(VInt 0);
		List.iter (function(e) {
			match fst e {
			| EAttribute (name,v) ->
				match name {
				| "padding-left" when set "pl" -> add lr v
				| "padding-right" when set "pr" -> add lr v
				| "padding-top" when set "pt" -> add tb v
				| "padding-bottom" when set "pb" -> add tb v
				| "padding" ->
					var t, r, b, l = match fst v {
					| VGroup [tb;rl] -> (tb, rl, tb, rl)
					| VGroup [t;rl;b] -> (t, rl, b, rl)
					| VGroup [t;r;b;l] -> (t, r, b, l)
					| _ -> (v, v, v, v)
					}
					if set "pl" then add lr l;
					if set "pr" then add lr r;
					if set "pt" then add tb t;
					if set "pb" then add tb b;
				| "border-left-width" when set "bl" -> add lr v
				| "border-right-width" when set "br" -> add lr v
				| "border-top-width" when set "bt" -> add tb v
				| "border-bottom-width" when set "bb" -> add tb v
				| "border" ->
					var v = match fst v {
						| VGroup (v :: _) -> v
						| _ -> v
					};
					if set "bl" then add lr v;
					if set "br" then add lr v;
					if set "bt" then add tb v;
					if set "bb" then add tb v;
				| _ -> ()
				}
			| _ -> ()
			}
		}) (List.rev el);
		(*lr, *tb)
	}
	match fst b {
	| EBlock (cl,el) ->
		var el = List.map (function(e) {
			match fst e {
			| EAttribute (name,val) ->
				var p = snd val;
				match name {
				| "hss-width" ->
					var w, _ = get_block_sizes el;
					(EAttribute("width", eval ctx (VOp(Sub,val,(w,p)),p)),p)
				| "hss-height" ->
					var _, h = get_block_sizes el;
					(EAttribute("height", eval ctx (VOp(Sub,val,(h,p)),p)),p)
				| _ -> e
				}
			| _ -> assert()
			}
		}) el;
		(EBlock cl el, snd b)
	| _ ->
		assert();
	}
}

function rec expand_hacks(name,value,p) {
	function filter(name,params,p) {
		(EAttribute "filter" (VCall (VIdent "CSS",p) [(VString ("progid:DXImageTransform.Microsoft."+name+"("+params+")"),p)],p),p)
	}
	match name {
	| "border-radius" | "border-top-right-radius" | "border-top-left-radius" | "border-bottom-right-radius" | "border-bottom-left-radius" ->
		var moz = match String.split name "-" {
			| _ :: p1 :: p2 :: _ -> "-"+p1+p2
			| _ -> ""
		};
		(ESub [
			(EAttribute name value,p);
			(EAttribute ("-moz-border-radius"+moz) value,p);
			(EAttribute ("-webkit-"+name) value,p)
		],p)
	| "background-color" | "color" | "background" ->
		var first = match fst value { VGroup v :: l -> v | _ -> value };
		match fst first {
		| VCall ((VIdent "rgba",_),[r;g;b;a]) ->
			var hcol = String.concat "" (List.map (function(c) {
				match fst c {
				| VInt i -> sprintf "%.2X" i
				| VUnit (f,"%") ->
					var i = Math.floor (f * 2.55);
					sprintf "%.2X" (if i < 0 then 0 else if i > 255 then 255 else i)
				| _ -> assert()
				}
			}) [r;g;b]);
			var col = (VHex hcol,p);
			match name {
			| "background" | "background-color" ->
				var acol = match fst a {
					| VFloat f ->
						var i = Math.floor (f * 255.);
						sprintf "%.2X" (if i < 0 then 0 else if i > 255 then 255 else i) + hcol
					| _ -> assert()
				};
				var base = if name == "background" then
					match fst value {
					| VGroup _ :: l ->
						// let's first apply all other properties (except color)
						[(EAttribute "background" (VGroup l,snd value),p)]
					| _ -> []
				} else [];
				(ESub (List.append base [
					// fallback fixed color
					(EAttribute "background-color" col,p);
					// original rgba
					(EAttribute "background-color" first,p);
					// disable background-color (IE only)
					(EAttribute "background-color" (VIdent "transparent\\9",p),p);
					// adds filter : the only side effect is that the filter will be over the background-image
					filter "gradient" ("startColorstr=#"+acol+", endColorstr=#"+acol) p;
					(EAttribute "zoom" (VInt 1,p),p);
				]),p)
			| _ ->
				(ESub [
					(EAttribute name col,p); // simply adds a fallback with fixed hex color
					(EAttribute name value,p);
				],p)
			}
		| _ ->
			(EAttribute name value,p)
		}
	| "opacity" ->
		var v = match fst value {
			| VInt i -> i * 100
			| VFloat f -> Math.floor (f * 100)
			| _ -> assert()
		}
		(ESub [
			(EAttribute "opacity" value,p);
			(EAttribute "filter" (VCall (VIdent "alpha",p) [(VBind "opacity" (VInt v,p),p)],p),p);
			(EAttribute "zoom" (VInt 1,p),p);
		],p)
	| "user-select" ->
		(ESub [
			(EAttribute name value,p);
			(EAttribute "-moz-user-select" value,p);
			(EAttribute "-webkit-user-select" value,p)
		],p)
	| "display" when fst value == VIdent "inline-block" ->
		(ESub [
			//(EAttribute "display" (VIdent "-moz-inline-stack",p),p); // Firefox 2 fix
			(EAttribute "display" value,p);
			// these two will fix inline-block for IE7
			(EAttribute "zoom" (VInt 1,p),p);
			(EAttribute "*display" (VIdent "inline",p),p);
		],p)
	| "box-shadow" ->
		(ESub [
			(EAttribute "-moz-box-shadow" value,p);
			(EAttribute "-webkit-box-shadow" value,p);
			(EAttribute name value,p)
		],p)
	| _ ->
		(EAttribute name value,p)
	}
}

function rec check_class(ctx,p,c) {
	match c.selector {
	| None ->
	| Some s -> if !(List.mem s selectors) then error ("Invalid selector '"+s+"'") p
	}
	match c.sub {
	| None -> ()
	| Some c -> check_class ctx p c
	}
}

function rec check(ctx,e) {
	match fst e {
	| EVar (name,value) ->
		ctx.vars := Map.add ctx.vars name value;
		e
	| EVarBlock (name,el) ->
		ctx.blocks := Map.add ctx.blocks name el;
		e
	| EBlock (classes,el) ->
		var old = (ctx.vars,ctx.blocks);
		var el = List.map (check ctx) el;
		List.iter (check_class ctx snd(e)) classes;
		// check duplicate variables
		ignore(List.fold (function(acc,e) {
			match fst e {
			| EAttribute(name,_) ->
				if Map.exists acc name then warning ("Warning, duplicate attribute '"+name+"'") snd(e);
				Map.add acc name true
			| ESub _ -> acc // don't take into account sub-blocks
			| _ -> acc
			}
		}) Map.empty() el);
		ctx.vars := fst old;
		ctx.blocks := snd old;
		(EBlock classes el,snd e)
	| EAttribute (name,value) ->
		var value = eval ctx value;
		match value {
		| (VCall ((VIdent "CSS",_),[(VString _,_)]),_) -> ()
		| _ ->
			var rules = try Hashtbl.find hrules name catch { Not_found -> error ("Unknown attribute '"+name+"'") snd(e) };
			if !(List.exists (function(r) check_rule r value) rules) then {
				var buf, str = IO.write_string();
				print_value buf value;
				error ("Invalid '"+name+"' value '"+str()+"'") snd(e);
			}
		}
		expand_hacks name value snd(e)
	| EUseBlock name ->
		var b = try Map.find ctx.blocks name catch { Not_found -> error ("Variable not declared '" + name + "'") snd(e) };
		var b = try List.map (check ctx) b catch { Error l -> throw Error(("Included here ",snd e)::l) };
		(ESub b, snd e)
	| ESub el ->
		(ESub (List.map (check ctx) el),snd e)
	}
}

function display(msg,p) {
	if p == Lexer.null_pos then	{
		Stack.dump IO.stderr Stack.exc();
		IO.printf IO.stderr "Exception : %s\n" msg
	} else
	IO.printf IO.stderr "%s:%d: %s\n" (Lexer.source p,Lexer.line p,msg);
}

function report(msg,p) {
	display msg p;
	Sys.exit(-1);
}

try {
	var head = "HSS v1.2 - (c)2008-2011 Motion-Twin\nUsage : hss [options] <file>";
	var files = &[];
	var output = &None;
	var decl = [
		("-output",Args.String (function(o) output := Some o),"<dir> : specify output directory");
	];
	Args.parse head decl (function(file) files := file :: *files);
	List.iter (function(file) {
		// parse
		var ch = IO.read_file file true;
		var lex = Lexer.create Buffer.create();
		Lexer.input lex file ch 1 0;
		var el = Hss.Parser.parse lex;
		IO.close_in ch;
		// check + replace vars
		var ctx = { vars = Map.empty(); blocks = Map.empty() };
		var el = List.map (check ctx) el;
		// flatten
		var el = List.concat (List.map flatten([]) el);
		// final eval
		var el = List.map eval_block(ctx) el;
		// write
		var file2 = Sys.without_extension file + ".css";
		var file2 = match *output { None -> file2 | Some dir -> dir + Sys.without_dir file2 };
		if file != file2 then {
			var ch = IO.write_file file2 true;
			List.iter (print_css ch "") el;
			IO.close_out ch;
		}
	}) (*files);
} catch {
	// todo : fix a small bug in nekoml to have ctx.current not to lowercase
	// in order to get correct constructor hashing
	| Hss.Lexer.Error(msg,pos) -> report Hss.Lexer.error_msg(msg) pos
	| Hss.Parser.Error(msg,pos) -> report Hss.Parser.error_msg(msg) pos
	| Error l -> List.iter (function((msg,p)) display msg p) List.rev(l); Sys.exit (-1);
	| e ->
		Stack.dump IO.stderr Stack.exc();
		IO.printf IO.stderr "Exception : %s\n" string(e);
		Sys.exit (-1);
}